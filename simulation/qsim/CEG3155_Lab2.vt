// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2025 18:29:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alu_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_top_vlg_sample_tst(
	GClock,
	GReset,
	OperandA,
	OperandB,
	OperationSelect,
	sampler_tx
);
input  GClock;
input  GReset;
input [3:0] OperandA;
input [3:0] OperandB;
input [1:0] OperationSelect;
output sampler_tx;

reg sample;
time current_time;
always @(GClock or GReset or OperandA or OperandB or OperationSelect)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alu_top_vlg_check_tst (
	CarryOut,
	MuxOut,
	OverflowOut,
	ZeroOut,
	sampler_rx
);
input  CarryOut;
input [7:0] MuxOut;
input  OverflowOut;
input  ZeroOut;
input sampler_rx;

reg  CarryOut_expected;
reg [7:0] MuxOut_expected;
reg  OverflowOut_expected;
reg  ZeroOut_expected;

reg  CarryOut_prev;
reg [7:0] MuxOut_prev;
reg  OverflowOut_prev;
reg  ZeroOut_prev;

reg  CarryOut_expected_prev;
reg [7:0] MuxOut_expected_prev;
reg  OverflowOut_expected_prev;
reg  ZeroOut_expected_prev;

reg  last_CarryOut_exp;
reg [7:0] last_MuxOut_exp;
reg  last_OverflowOut_exp;
reg  last_ZeroOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	CarryOut_prev = CarryOut;
	MuxOut_prev = MuxOut;
	OverflowOut_prev = OverflowOut;
	ZeroOut_prev = ZeroOut;
end

// update expected /o prevs

always @(trigger)
begin
	CarryOut_expected_prev = CarryOut_expected;
	MuxOut_expected_prev = MuxOut_expected;
	OverflowOut_expected_prev = OverflowOut_expected;
	ZeroOut_expected_prev = ZeroOut_expected;
end



// expected OverflowOut
initial
begin
	OverflowOut_expected = 1'bX;
end 

// expected ZeroOut
initial
begin
	ZeroOut_expected = 1'bX;
end 

// expected CarryOut
initial
begin
	CarryOut_expected = 1'bX;
end 
// expected MuxOut[ 7 ]
initial
begin
	MuxOut_expected[7] = 1'bX;
end 
// expected MuxOut[ 6 ]
initial
begin
	MuxOut_expected[6] = 1'bX;
end 
// expected MuxOut[ 5 ]
initial
begin
	MuxOut_expected[5] = 1'bX;
end 
// expected MuxOut[ 4 ]
initial
begin
	MuxOut_expected[4] = 1'bX;
end 
// expected MuxOut[ 3 ]
initial
begin
	MuxOut_expected[3] = 1'bX;
end 
// expected MuxOut[ 2 ]
initial
begin
	MuxOut_expected[2] = 1'bX;
end 
// expected MuxOut[ 1 ]
initial
begin
	MuxOut_expected[1] = 1'bX;
end 
// expected MuxOut[ 0 ]
initial
begin
	MuxOut_expected[0] = 1'bX;
end 
// generate trigger
always @(CarryOut_expected or CarryOut or MuxOut_expected or MuxOut or OverflowOut_expected or OverflowOut or ZeroOut_expected or ZeroOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CarryOut = %b | expected MuxOut = %b | expected OverflowOut = %b | expected ZeroOut = %b | ",CarryOut_expected_prev,MuxOut_expected_prev,OverflowOut_expected_prev,ZeroOut_expected_prev);
	$display("| real CarryOut = %b | real MuxOut = %b | real OverflowOut = %b | real ZeroOut = %b | ",CarryOut_prev,MuxOut_prev,OverflowOut_prev,ZeroOut_prev);
`endif
	if (
		( CarryOut_expected_prev !== 1'bx ) && ( CarryOut_prev !== CarryOut_expected_prev )
		&& ((CarryOut_expected_prev !== last_CarryOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CarryOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CarryOut_expected_prev);
		$display ("     Real value = %b", CarryOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CarryOut_exp = CarryOut_expected_prev;
	end
	if (
		( MuxOut_expected_prev[0] !== 1'bx ) && ( MuxOut_prev[0] !== MuxOut_expected_prev[0] )
		&& ((MuxOut_expected_prev[0] !== last_MuxOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[0] = MuxOut_expected_prev[0];
	end
	if (
		( MuxOut_expected_prev[1] !== 1'bx ) && ( MuxOut_prev[1] !== MuxOut_expected_prev[1] )
		&& ((MuxOut_expected_prev[1] !== last_MuxOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[1] = MuxOut_expected_prev[1];
	end
	if (
		( MuxOut_expected_prev[2] !== 1'bx ) && ( MuxOut_prev[2] !== MuxOut_expected_prev[2] )
		&& ((MuxOut_expected_prev[2] !== last_MuxOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[2] = MuxOut_expected_prev[2];
	end
	if (
		( MuxOut_expected_prev[3] !== 1'bx ) && ( MuxOut_prev[3] !== MuxOut_expected_prev[3] )
		&& ((MuxOut_expected_prev[3] !== last_MuxOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[3] = MuxOut_expected_prev[3];
	end
	if (
		( MuxOut_expected_prev[4] !== 1'bx ) && ( MuxOut_prev[4] !== MuxOut_expected_prev[4] )
		&& ((MuxOut_expected_prev[4] !== last_MuxOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[4] = MuxOut_expected_prev[4];
	end
	if (
		( MuxOut_expected_prev[5] !== 1'bx ) && ( MuxOut_prev[5] !== MuxOut_expected_prev[5] )
		&& ((MuxOut_expected_prev[5] !== last_MuxOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[5] = MuxOut_expected_prev[5];
	end
	if (
		( MuxOut_expected_prev[6] !== 1'bx ) && ( MuxOut_prev[6] !== MuxOut_expected_prev[6] )
		&& ((MuxOut_expected_prev[6] !== last_MuxOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[6] = MuxOut_expected_prev[6];
	end
	if (
		( MuxOut_expected_prev[7] !== 1'bx ) && ( MuxOut_prev[7] !== MuxOut_expected_prev[7] )
		&& ((MuxOut_expected_prev[7] !== last_MuxOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MuxOut_exp[7] = MuxOut_expected_prev[7];
	end
	if (
		( OverflowOut_expected_prev !== 1'bx ) && ( OverflowOut_prev !== OverflowOut_expected_prev )
		&& ((OverflowOut_expected_prev !== last_OverflowOut_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OverflowOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OverflowOut_expected_prev);
		$display ("     Real value = %b", OverflowOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OverflowOut_exp = OverflowOut_expected_prev;
	end
	if (
		( ZeroOut_expected_prev !== 1'bx ) && ( ZeroOut_prev !== ZeroOut_expected_prev )
		&& ((ZeroOut_expected_prev !== last_ZeroOut_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZeroOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZeroOut_expected_prev);
		$display ("     Real value = %b", ZeroOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ZeroOut_exp = ZeroOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alu_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GClock;
reg GReset;
reg [3:0] OperandA;
reg [3:0] OperandB;
reg [1:0] OperationSelect;
// wires                                               
wire CarryOut;
wire [7:0] MuxOut;
wire OverflowOut;
wire ZeroOut;

wire sampler;                             

// assign statements (if any)                          
alu_top i1 (
// port map - connection between master ports and signals/registers   
	.CarryOut(CarryOut),
	.GClock(GClock),
	.GReset(GReset),
	.MuxOut(MuxOut),
	.OperandA(OperandA),
	.OperandB(OperandB),
	.OperationSelect(OperationSelect),
	.OverflowOut(OverflowOut),
	.ZeroOut(ZeroOut)
);

// GClock
always
begin
	GClock = 1'b0;
	GClock = #500 1'b1;
	#500;
end 

// GReset
initial
begin
	GReset = 1'b1;
	# 10000;
	repeat(49)
	begin
		GReset = 1'b0;
		GReset = #10000 1'b1;
		# 10000;
	end
	GReset = 1'b0;
end 
// OperandA[ 3 ]
initial
begin
	OperandA[3] = 1'b0;
	OperandA[3] = #30000 1'b1;
	OperandA[3] = #10000 1'b0;
	OperandA[3] = #30000 1'b1;
	OperandA[3] = #10000 1'b0;
	OperandA[3] = #10000 1'b1;
	OperandA[3] = #10000 1'b0;
	OperandA[3] = #70000 1'b1;
	OperandA[3] = #10000 1'b0;
	OperandA[3] = #10000 1'b1;
	OperandA[3] = #10000 1'b0;
	OperandA[3] = #70000 1'b1;
	OperandA[3] = #10000 1'b0;
end 
// OperandA[ 2 ]
initial
begin
	OperandA[2] = 1'b0;
	OperandA[2] = #30000 1'b1;
	OperandA[2] = #10000 1'b0;
	OperandA[2] = #30000 1'b1;
	OperandA[2] = #10000 1'b0;
	OperandA[2] = #90000 1'b1;
	OperandA[2] = #10000 1'b0;
	OperandA[2] = #10000 1'b1;
	OperandA[2] = #10000 1'b0;
	OperandA[2] = #70000 1'b1;
	OperandA[2] = #10000 1'b0;
end 
// OperandA[ 1 ]
initial
begin
	OperandA[1] = 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #30000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #50000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
	OperandA[1] = #10000 1'b1;
	OperandA[1] = #10000 1'b0;
end 
// OperandA[ 0 ]
initial
begin
	OperandA[0] = 1'b0;
	OperandA[0] = #50000 1'b1;
	OperandA[0] = #10000 1'b0;
	OperandA[0] = #30000 1'b1;
	OperandA[0] = #10000 1'b0;
	OperandA[0] = #10000 1'b1;
	OperandA[0] = #10000 1'b0;
	OperandA[0] = #10000 1'b1;
	OperandA[0] = #10000 1'b0;
	OperandA[0] = #10000 1'b1;
	OperandA[0] = #10000 1'b0;
	OperandA[0] = #10000 1'b1;
	OperandA[0] = #10000 1'b0;
	OperandA[0] = #10000 1'b1;
	OperandA[0] = #10000 1'b0;
	OperandA[0] = #90000 1'b1;
	OperandA[0] = #10000 1'b0;
end 
// OperandB[ 3 ]
initial
begin
	OperandB[3] = 1'b0;
	OperandB[3] = #70000 1'b1;
	OperandB[3] = #10000 1'b0;
	OperandB[3] = #10000 1'b1;
	OperandB[3] = #10000 1'b0;
	OperandB[3] = #90000 1'b1;
	OperandB[3] = #10000 1'b0;
	OperandB[3] = #50000 1'b1;
	OperandB[3] = #10000 1'b0;
	OperandB[3] = #10000 1'b1;
	OperandB[3] = #10000 1'b0;
end 
// OperandB[ 2 ]
initial
begin
	OperandB[2] = 1'b0;
	OperandB[2] = #50000 1'b1;
	OperandB[2] = #10000 1'b0;
	OperandB[2] = #90000 1'b1;
	OperandB[2] = #10000 1'b0;
	OperandB[2] = #30000 1'b1;
	OperandB[2] = #10000 1'b0;
	OperandB[2] = #50000 1'b1;
	OperandB[2] = #10000 1'b0;
	OperandB[2] = #10000 1'b1;
	OperandB[2] = #10000 1'b0;
	OperandB[2] = #10000 1'b1;
	OperandB[2] = #10000 1'b0;
end 
// OperandB[ 1 ]
initial
begin
	OperandB[1] = 1'b0;
	OperandB[1] = #10000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #10000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #10000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #10000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #10000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #10000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #10000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #30000 1'b1;
	OperandB[1] = #10000 1'b0;
	OperandB[1] = #30000 1'b1;
	OperandB[1] = #10000 1'b0;
end 
// OperandB[ 0 ]
initial
begin
	OperandB[0] = 1'b0;
	OperandB[0] = #10000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #10000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #10000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #10000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #50000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #30000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #30000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #30000 1'b1;
	OperandB[0] = #10000 1'b0;
	OperandB[0] = #10000 1'b1;
	OperandB[0] = #10000 1'b0;
end 
// OperationSelect[ 1 ]
initial
begin
	OperationSelect[1] = 1'b0;
	OperationSelect[1] = #205000 1'b1;
	OperationSelect[1] = #5000 1'b0;
	OperationSelect[1] = #5000 1'b1;
	OperationSelect[1] = #85000 1'b0;
end 
// OperationSelect[ 0 ]
initial
begin
	OperationSelect[0] = 1'b0;
	OperationSelect[0] = #100000 1'b1;
	OperationSelect[0] = #100000 1'b0;
end 

alu_top_vlg_sample_tst tb_sample (
	.GClock(GClock),
	.GReset(GReset),
	.OperandA(OperandA),
	.OperandB(OperandB),
	.OperationSelect(OperationSelect),
	.sampler_tx(sampler)
);

alu_top_vlg_check_tst tb_out(
	.CarryOut(CarryOut),
	.MuxOut(MuxOut),
	.OverflowOut(OverflowOut),
	.ZeroOut(ZeroOut),
	.sampler_rx(sampler)
);
endmodule

